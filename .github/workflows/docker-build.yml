name: Build, Push and Deploy to Rancher (externo)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ secrets.OCI_REGION }}
          username: ${{ secrets.OCI_USER }}
          password: ${{ secrets.OCI_PASS }}

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.OCI_REGION }}/${{ secrets.OCI_NAMESPACE }}/poc/image/teste:latest

  deploy:
    runs-on: [self-hosted, dkr-surf-externo] # seu runner
    needs: build
    steps:
      - name: Deploy to Rancher 1.6 (externo)
        run: |
          set -euo pipefail
          IMAGE="${{ secrets.OCI_REGION }}/${{ secrets.OCI_NAMESPACE }}/poc/image/teste:latest"
          NAME="app-poc"
          PROJECT_ID="1a120"

          echo "‚úÖ Usando PROJECT_ID=$PROJECT_ID"
          echo "üîé Verificando se container $NAME j√° existe..."

          # Buscar container existente
          CONTAINERS=$(curl -s -u "${{ secrets.RANCHER_ACCESS_KEY }}:${{ secrets.RANCHER_SECRET_KEY }}" \
            "${{ secrets.RANCHER_URL }}/v2-beta/projects/$PROJECT_ID/containers")
          CONTAINER=$(echo "$CONTAINERS" | jq -r ".data[] | select(.name==\"$NAME\")")

          if [ -n "$CONTAINER" ] && [ "$CONTAINER" != "null" ]; then
            CONTAINER_ID=$(echo "$CONTAINER" | jq -r ".id")
            OLD_IMAGE=$(echo "$CONTAINER" | jq -r ".imageUuid" | sed 's/^docker://')

            echo "üì¶ Container $NAME j√° existe (ID=$CONTAINER_ID)"
            echo "Imagem atual: $OLD_IMAGE"
            echo "Nova imagem: $IMAGE"

            # Atualizar imagem
            curl -s -u "${{ secrets.RANCHER_ACCESS_KEY }}:${{ secrets.RANCHER_SECRET_KEY }}" \
              -X PUT "${{ secrets.RANCHER_URL }}/v2-beta/projects/$PROJECT_ID/containers/$CONTAINER_ID" \
              -H 'Content-Type: application/json' \
              -d "{
                \"imageUuid\": \"docker:$IMAGE\",
                \"restartPolicy\": {\"name\": \"always\"},
                \"alwaysPullImage\": true
              }"

            echo "‚è≥ Aguardando container subir..."
            sleep 20

            STATUS=$(curl -s -u "${{ secrets.RANCHER_ACCESS_KEY }}:${{ secrets.RANCHER_SECRET_KEY }}" \
              "${{ secrets.RANCHER_URL }}/v2-beta/projects/$PROJECT_ID/containers/$CONTAINER_ID" | jq -r ".state")

            if [ "$STATUS" != "running" ]; then
              echo "‚ö†Ô∏è Deploy falhou (status=$STATUS). Fazendo rollback para imagem antiga: $OLD_IMAGE"

              curl -s -u "${{ secrets.RANCHER_ACCESS_KEY }}:${{ secrets.RANCHER_SECRET_KEY }}" \
                -X PUT "${{ secrets.RANCHER_URL }}/v2-beta/projects/$PROJECT_ID/containers/$CONTAINER_ID" \
                -H 'Content-Type: application/json' \
                -d "{
                  \"imageUuid\": \"docker:$OLD_IMAGE\",
                  \"restartPolicy\": {\"name\": \"always\"},
                  \"alwaysPullImage\": true
                }"

              echo "üîô Rollback aplicado. Verifique logs do Rancher."
              exit 1
            fi

            echo "‚úÖ Deploy atualizado com sucesso."
          else
            echo "üöÄ Container $NAME n√£o existe. Criando..."
            curl -s -u "${{ secrets.RANCHER_ACCESS_KEY }}:${{ secrets.RANCHER_SECRET_KEY }}" \
              -X POST "${{ secrets.RANCHER_URL }}/v2-beta/projects/$PROJECT_ID/containers" \
              -H 'Content-Type: application/json' \
              -d "{
                \"name\": \"$NAME\",
                \"imageUuid\": \"docker:$IMAGE\",
                \"restartPolicy\": {\"name\": \"always\"},
                \"alwaysPullImage\": true,
                \"publishAllPorts\": false,
                \"ports\": [\"9000:9000/tcp\"]
              }"
            echo "‚úÖ Container $NAME criado com sucesso."
          fi
