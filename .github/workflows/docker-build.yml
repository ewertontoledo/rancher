name: Build, Push and Deploy to Rancher (externo)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ secrets.OCI_REGION }}
          username: ${{ secrets.OCI_USER }}
          password: ${{ secrets.OCI_PASS }}

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.OCI_REGION }}/${{ secrets.OCI_NAMESPACE }}/poc/image/teste:latest

      - name: Deploy to Rancher 1.6 (externo)
        run: |
          set -euo pipefail
          IMAGE="${{ secrets.OCI_REGION }}/${{ secrets.OCI_NAMESPACE }}/poc/image/teste:latest"
          NAME="app-poc"
          PROJECT_ID="1a120"
          AUTH="${{ secrets.RANCHER_ACCESS_KEY }}:${{ secrets.RANCHER_SECRET_KEY }}"
          URL="${{ secrets.RANCHER_URL }}/v2-beta/projects/$PROJECT_ID"

          echo "âœ… Usando PROJECT_ID=$PROJECT_ID"

          # Buscar container pelo nome
          CONTAINER_ID=$(curl -s -u "$AUTH" "$URL/containers" \
            | jq -r --arg NAME "$NAME" '.data[] | select(.name==$NAME) | .id')

          if [ -n "$CONTAINER_ID" ] && [ "$CONTAINER_ID" != "null" ]; then
            echo "ðŸ“¦ Container $NAME encontrado (ID=$CONTAINER_ID). Atualizando imagem..."

            # Parar o container
            curl -s -u "$AUTH" -X POST "$URL/containers/$CONTAINER_ID?action=stop"
            sleep 5

            # Remover o container
            curl -s -u "$AUTH" -X DELETE "$URL/containers/$CONTAINER_ID"
            sleep 5

            # Recriar o container
            curl -s -u "$AUTH" -X POST "$URL/containers" \
              -H 'Content-Type: application/json' \
              -d "{
                \"name\": \"$NAME\",
                \"imageUuid\": \"docker:$IMAGE\",
                \"networkMode\": \"managed\",
                \"restartPolicy\": {\"name\": \"always\"},
                \"alwaysPullImage\": true,
                \"startOnCreate\": true,
                \"publishAllPorts\": false,
                \"ports\": [\"9000:9000/tcp\"]
              }"

            echo "âœ… Container $NAME recriado com a nova imagem."
          else
            echo "ðŸš€ Container $NAME nÃ£o existe. Criando..."
            curl -s -u "$AUTH" -X POST "$URL/containers" \
              -H 'Content-Type: application/json' \
              -d "{
                \"name\": \"$NAME\",
                \"imageUuid\": \"docker:$IMAGE\",
                \"networkMode\": \"managed\",
                \"restartPolicy\": {\"name\": \"always\"},
                \"alwaysPullImage\": true,
                \"startOnCreate\": true,
                \"publishAllPorts\": false,
                \"ports\": [\"9000:9000/tcp\"]
              }"
            echo "âœ… Container $NAME criado com sucesso."
          fi
