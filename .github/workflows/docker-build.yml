name: Build and Deploy OCI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: [self-hosted, macOS, X64]   # força rodar no runner local

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ secrets.OCI_REGION }}      # ex.: gru.ocir.io
          username: ${{ secrets.OCI_USER }}        # ex.: tenancy/usuario@empresa.com
          password: ${{ secrets.OCI_PASS }}        # Auth Token

      - name: Build & Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.OCI_REGION }}/${{ secrets.OCI_NAMESPACE }}/poc/image/teste:latest
      - name: Configurar Kubeconfig
        run: |
          mkdir -p /tmp/kube
          echo "apiVersion: v1" > /tmp/kube/config
          echo "kind: Config" >> /tmp/kube/config
          echo "clusters:" >> /tmp/kube/config
          echo "- cluster:" >> /tmp/kube/config
          echo "    server: ${{ secrets.RANCHER_URL }}/k8s/clusters/local" >> /tmp/kube/config
          echo "    insecure-skip-tls-verify: true" >> /tmp/kube/config
          echo "  name: local" >> /tmp/kube/config
          echo "contexts:" >> /tmp/kube/config
          echo "- context:" >> /tmp/kube/config
          echo "    cluster: local" >> /tmp/kube/config
          echo "    user: rancher-user" >> /tmp/kube/config
          echo "    namespace: local" >> /tmp/kube/config
          echo "  name: local" >> /tmp/kube/config
          echo "current-context: local" >> /tmp/kube/config
          echo "users:" >> /tmp/kube/config
          echo "- name: rancher-user" >> /tmp/kube/config
          echo "  user:" >> /tmp/kube/config
          echo "    token: ${{ secrets.RANCHER_TOKEN }}" >> /tmp/kube/config
          chmod 600 /tmp/kube/config
          echo "KUBECONFIG=/tmp/kube/config" >> $GITHUB_ENV
      - name: Deploy no Rancher (via kubectl)
        run: |
          set -e
          NAMESPACE=local
          DEPLOYMENT=poc-app
          IMAGE="${{ secrets.OCI_REGION }}/${{ secrets.OCI_NAMESPACE }}/poc/image/teste:v1.0.0"
          echo ">> Fazendo deploy da imagem $IMAGE no deployment $DEPLOYMENT"
          kubectl -n $NAMESPACE get deployment $DEPLOYMENT -o yaml > /tmp/${DEPLOYMENT}_prev.yaml || true
          # Deployment
          echo "apiVersion: apps/v1" > /tmp/deployment.yaml
          echo "kind: Deployment" >> /tmp/deployment.yaml
          echo "metadata:" >> /tmp/deployment.yaml
          echo "  name: $DEPLOYMENT" >> /tmp/deployment.yaml
          echo "  namespace: $NAMESPACE" >> /tmp/deployment.yaml
          echo "spec:" >> /tmp/deployment.yaml
          echo "  replicas: 1" >> /tmp/deployment.yaml
          echo "  selector:" >> /tmp/deployment.yaml
          echo "    matchLabels:" >> /tmp/deployment.yaml
          echo "      app: $DEPLOYMENT" >> /tmp/deployment.yaml
          echo "  template:" >> /tmp/deployment.yaml
          echo "    metadata:" >> /tmp/deployment.yaml
          echo "      labels:" >> /tmp/deployment.yaml
          echo "        app: $DEPLOYMENT" >> /tmp/deployment.yaml
          echo "    spec:" >> /tmp/deployment.yaml
          echo "      containers:" >> /tmp/deployment.yaml
          echo "      - name: container-0" >> /tmp/deployment.yaml
          echo "        image: $IMAGE" >> /tmp/deployment.yaml
          echo "        imagePullPolicy: Always" >> /tmp/deployment.yaml
          echo "        ports:" >> /tmp/deployment.yaml
          echo "        - containerPort: 9000" >> /tmp/deployment.yaml
          # Service
          echo "apiVersion: v1" > /tmp/service.yaml
          echo "kind: Service" >> /tmp/service.yaml
          echo "metadata:" >> /tmp/service.yaml
          echo "  name: ${DEPLOYMENT}-svc" >> /tmp/service.yaml
          echo "  namespace: $NAMESPACE" >> /tmp/service.yaml
          echo "spec:" >> /tmp/service.yaml
          echo "  selector:" >> /tmp/service.yaml
          echo "    app: $DEPLOYMENT" >> /tmp/service.yaml
          echo "  ports:" >> /tmp/service.yaml
          echo "  - name: http" >> /tmp/service.yaml
          echo "    protocol: TCP" >> /tmp/service.yaml
          echo "    port: 9000" >> /tmp/service.yaml
          echo "    targetPort: 9000" >> /tmp/service.yaml
          echo "  type: NodePort" >> /tmp/service.yaml
          kubectl apply -f /tmp/deployment.yaml
          kubectl apply -f /tmp/service.yaml
          echo ">> Verificando rollout..."
          if ! kubectl -n $NAMESPACE rollout status deployment/$DEPLOYMENT --timeout=60s; then
            echo "❌ Rollout falhou!"
            if kubectl -n $NAMESPACE rollout history deployment/$DEPLOYMENT >/dev/null 2>&1; then
              echo ">> Restaurando versão anterior..."
              kubectl apply -f /tmp/${DEPLOYMENT}_prev.yaml || true
              kubectl -n $NAMESPACE rollout undo deployment/$DEPLOYMENT || true
            else
              echo ">> Nenhuma versão anterior encontrada, nada para restaurar."
            fi
            exit 1
          fi